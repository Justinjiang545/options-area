{"ast":null,"code":"var _jsxFileName = \"/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/black-scholes/HeatmapDisplay.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeatmapContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 0.5rem;\n  margin-top: 0.5rem;\n  width: 100%;\n  max-width: 1000px;\n  margin-left: auto;\n  margin-right: auto;\n  overflow-x: hidden;\n`;\n_c = HeatmapContainer;\nconst HeatmapTitle = styled.h2`\n  font-size: 1.1rem;\n  margin-bottom: 0.75rem;\n  color: #333;\n`;\n_c2 = HeatmapTitle;\nconst HeatmapsGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  width: 100%;\n`;\n_c3 = HeatmapsGrid;\nconst HeatmapWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem;\n`;\n_c4 = HeatmapWrapper;\nconst HeatmapGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.cols}, minmax(22px, 1fr));\n  gap: 1px;\n  background-color: #ddd;\n  padding: 1px;\n  width: 100%;\n  max-width: 380px;\n  margin: 0 auto;\n`;\n_c5 = HeatmapGrid;\nconst Cell = styled.div`\n  aspect-ratio: 1;\n  background-color: ${props => props.color};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.65rem;\n  color: ${props => props.textColor};\n  transition: all 0.2s;\n  cursor: pointer;\n  padding: 1px;\n  \n  &:hover {\n    transform: scale(1.1);\n    z-index: 1;\n  }\n`;\n_c6 = Cell;\nconst AxisLabel = styled.div`\n  font-size: 0.65rem;\n  color: #666;\n  margin: ${props => props.margin};\n  text-align: right;\n  min-width: 2rem;\n  line-height: 1.2rem;\n  height: 1.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n_c7 = AxisLabel;\nconst Legend = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.5rem;\n  gap: 0.25rem;\n`;\n_c8 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.15rem;\n  font-size: 0.65rem;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 10px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n_c11 = LoadingMessage;\nconst getColorForValue = (value, min, max) => {\n  const ratio = (value - min) / (max - min);\n  const hue = ((1 - ratio) * 240).toFixed(0); // 240 is blue, 0 is red\n  return `hsl(${hue}, 70%, 50%)`;\n};\nconst getTextColor = backgroundColor => {\n  try {\n    // Check if backgroundColor is defined and is a string\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#000'; // Default to black text\n    }\n\n    // Check if it matches our expected HSL format\n    const match = backgroundColor.match(/hsl\\((\\d+)/);\n    if (!match || !match[1]) {\n      return '#000'; // Default to black text\n    }\n    const hue = parseInt(match[1]);\n    return hue > 120 ? '#000' : '#fff';\n  } catch (error) {\n    console.warn('Error calculating text color:', error);\n    return '#000'; // Default to black text on error\n  }\n};\nconst HeatmapDisplay = ({\n  heatmapData,\n  isLoading\n}) => {\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(HeatmapContainer, {\n      children: [/*#__PURE__*/_jsxDEV(HeatmapTitle, {\n        children: \"Price Heatmaps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Generating heatmaps...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n  if (!heatmapData) {\n    return null;\n  }\n  const renderHeatmap = (data, title) => {\n    const flatData = data.flat();\n    const min = Math.min(...flatData);\n    const max = Math.max(...flatData);\n    return /*#__PURE__*/_jsxDEV(HeatmapWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AxisLabel, {\n        margin: \"0 0 0.5rem 0\",\n        children: \"Volatility (\\u03C3)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'flex-start',\n          gap: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%'\n          },\n          children: heatmapData.sigma_range.map((sigma, i) => /*#__PURE__*/_jsxDEV(AxisLabel, {\n            margin: \"0 0.5rem\",\n            style: {\n              height: `${100 / heatmapData.sigma_range.length}%`,\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: sigma.toFixed(2)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HeatmapGrid, {\n          cols: heatmapData.S_range.length,\n          children: data.map((row, i) => row.map((value, j) => {\n            const color = getColorForValue(value, min, max);\n            const textColor = getTextColor(color);\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              color: color,\n              textColor: textColor,\n              title: `Stock Price: $${heatmapData.S_range[j].toFixed(2)}\\nVolatility: ${heatmapData.sigma_range[i].toFixed(2)}\\nPrice: $${value.toFixed(2)}`,\n              children: value.toFixed(1)\n            }, `${i}-${j}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this);\n          })).reverse()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AxisLabel, {\n        margin: \"0.5rem 0 0 0\",\n        children: \"Stock Price ($)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${heatmapData.S_range.length}, 1fr)`,\n          width: '100%',\n          maxWidth: '380px',\n          margin: '0 auto'\n        },\n        children: heatmapData.S_range.map((price, i) => /*#__PURE__*/_jsxDEV(AxisLabel, {\n          style: {\n            textAlign: 'center',\n            justifyContent: 'center',\n            margin: '0'\n          },\n          children: price.toFixed(0)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        children: [/*#__PURE__*/_jsxDEV(LegendItem, {\n          children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n            color: \"hsl(240, 70%, 50%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", min.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n          children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n            color: \"hsl(120, 70%, 50%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", ((max + min) / 2).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n          children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n            color: \"hsl(0, 70%, 50%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", max.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(HeatmapContainer, {\n    children: [/*#__PURE__*/_jsxDEV(HeatmapTitle, {\n      children: \"Price Heatmaps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HeatmapsGrid, {\n      children: [renderHeatmap(heatmapData.call_heatmap, 'Call Option Prices'), renderHeatmap(heatmapData.put_heatmap, 'Put Option Prices')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_c12 = HeatmapDisplay;\nexport default HeatmapDisplay;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"HeatmapContainer\");\n$RefreshReg$(_c2, \"HeatmapTitle\");\n$RefreshReg$(_c3, \"HeatmapsGrid\");\n$RefreshReg$(_c4, \"HeatmapWrapper\");\n$RefreshReg$(_c5, \"HeatmapGrid\");\n$RefreshReg$(_c6, \"Cell\");\n$RefreshReg$(_c7, \"AxisLabel\");\n$RefreshReg$(_c8, \"Legend\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"LoadingMessage\");\n$RefreshReg$(_c12, \"HeatmapDisplay\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","HeatmapContainer","div","_c","HeatmapTitle","h2","_c2","HeatmapsGrid","_c3","HeatmapWrapper","_c4","HeatmapGrid","props","cols","_c5","Cell","color","textColor","_c6","AxisLabel","margin","_c7","Legend","_c8","LegendItem","_c9","LegendColor","_c10","LoadingMessage","_c11","getColorForValue","value","min","max","ratio","hue","toFixed","getTextColor","backgroundColor","match","parseInt","error","console","warn","HeatmapDisplay","heatmapData","isLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","renderHeatmap","data","title","flatData","flat","Math","style","display","alignItems","gap","flexDirection","height","sigma_range","map","sigma","i","length","S_range","row","j","reverse","gridTemplateColumns","width","maxWidth","price","textAlign","justifyContent","call_heatmap","put_heatmap","_c12","$RefreshReg$"],"sources":["/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/black-scholes/HeatmapDisplay.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst HeatmapContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 0.5rem;\n  margin-top: 0.5rem;\n  width: 100%;\n  max-width: 1000px;\n  margin-left: auto;\n  margin-right: auto;\n  overflow-x: hidden;\n`;\n\nconst HeatmapTitle = styled.h2`\n  font-size: 1.1rem;\n  margin-bottom: 0.75rem;\n  color: #333;\n`;\n\nconst HeatmapsGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  width: 100%;\n`;\n\nconst HeatmapWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem;\n`;\n\nconst HeatmapGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.cols}, minmax(22px, 1fr));\n  gap: 1px;\n  background-color: #ddd;\n  padding: 1px;\n  width: 100%;\n  max-width: 380px;\n  margin: 0 auto;\n`;\n\nconst Cell = styled.div`\n  aspect-ratio: 1;\n  background-color: ${props => props.color};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.65rem;\n  color: ${props => props.textColor};\n  transition: all 0.2s;\n  cursor: pointer;\n  padding: 1px;\n  \n  &:hover {\n    transform: scale(1.1);\n    z-index: 1;\n  }\n`;\n\nconst AxisLabel = styled.div`\n  font-size: 0.65rem;\n  color: #666;\n  margin: ${props => props.margin};\n  text-align: right;\n  min-width: 2rem;\n  line-height: 1.2rem;\n  height: 1.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst Legend = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.5rem;\n  gap: 0.25rem;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.15rem;\n  font-size: 0.65rem;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 10px;\n  background-color: ${props => props.color};\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n\nconst getColorForValue = (value, min, max) => {\n  const ratio = (value - min) / (max - min);\n  const hue = ((1 - ratio) * 240).toFixed(0); // 240 is blue, 0 is red\n  return `hsl(${hue}, 70%, 50%)`;\n};\n\nconst getTextColor = (backgroundColor) => {\n  try {\n    // Check if backgroundColor is defined and is a string\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#000'; // Default to black text\n    }\n    \n    // Check if it matches our expected HSL format\n    const match = backgroundColor.match(/hsl\\((\\d+)/);\n    if (!match || !match[1]) {\n      return '#000'; // Default to black text\n    }\n    \n    const hue = parseInt(match[1]);\n    return hue > 120 ? '#000' : '#fff';\n  } catch (error) {\n    console.warn('Error calculating text color:', error);\n    return '#000'; // Default to black text on error\n  }\n};\n\nconst HeatmapDisplay = ({ heatmapData, isLoading }) => {\n  if (isLoading) {\n    return (\n      <HeatmapContainer>\n        <HeatmapTitle>Price Heatmaps</HeatmapTitle>\n        <LoadingMessage>Generating heatmaps...</LoadingMessage>\n      </HeatmapContainer>\n    );\n  }\n  \n  if (!heatmapData) {\n    return null;\n  }\n  \n  const renderHeatmap = (data, title) => {\n    const flatData = data.flat();\n    const min = Math.min(...flatData);\n    const max = Math.max(...flatData);\n    \n    return (\n      <HeatmapWrapper>\n        <h3>{title}</h3>\n        <AxisLabel margin=\"0 0 0.5rem 0\">\n          Volatility (σ)\n        </AxisLabel>\n        <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.5rem' }}>\n          <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n            {heatmapData.sigma_range.map((sigma, i) => (\n              <AxisLabel \n                key={i} \n                margin=\"0 0.5rem\"\n                style={{ \n                  height: `${100 / heatmapData.sigma_range.length}%`,\n                  display: 'flex',\n                  alignItems: 'center'\n                }}\n              >\n                {sigma.toFixed(2)}\n              </AxisLabel>\n            ))}\n          </div>\n          <HeatmapGrid cols={heatmapData.S_range.length}>\n            {data.map((row, i) => \n              row.map((value, j) => {\n                const color = getColorForValue(value, min, max);\n                const textColor = getTextColor(color);\n                return (\n                  <Cell \n                    key={`${i}-${j}`} \n                    color={color}\n                    textColor={textColor}\n                    title={`Stock Price: $${heatmapData.S_range[j].toFixed(2)}\\nVolatility: ${heatmapData.sigma_range[i].toFixed(2)}\\nPrice: $${value.toFixed(2)}`}\n                  >\n                    {value.toFixed(1)}\n                  </Cell>\n                );\n              })\n            ).reverse()}\n          </HeatmapGrid>\n        </div>\n        <AxisLabel margin=\"0.5rem 0 0 0\">\n          Stock Price ($)\n        </AxisLabel>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: `repeat(${heatmapData.S_range.length}, 1fr)`,\n          width: '100%', \n          maxWidth: '380px', \n          margin: '0 auto'\n        }}>\n          {heatmapData.S_range.map((price, i) => (\n            <AxisLabel \n              key={i}\n              style={{\n                textAlign: 'center',\n                justifyContent: 'center',\n                margin: '0'\n              }}\n            >\n              {price.toFixed(0)}\n            </AxisLabel>\n          ))}\n        </div>\n        <Legend>\n          <LegendItem>\n            <LegendColor color=\"hsl(240, 70%, 50%)\" />\n            <span>${min.toFixed(2)}</span>\n          </LegendItem>\n          <LegendItem>\n            <LegendColor color=\"hsl(120, 70%, 50%)\" />\n            <span>${((max + min) / 2).toFixed(2)}</span>\n          </LegendItem>\n          <LegendItem>\n            <LegendColor color=\"hsl(0, 70%, 50%)\" />\n            <span>${max.toFixed(2)}</span>\n          </LegendItem>\n        </Legend>\n      </HeatmapWrapper>\n    );\n  };\n  \n  return (\n    <HeatmapContainer>\n      <HeatmapTitle>Price Heatmaps</HeatmapTitle>\n      <HeatmapsGrid>\n        {renderHeatmap(heatmapData.call_heatmap, 'Call Option Prices')}\n        {renderHeatmap(heatmapData.put_heatmap, 'Put Option Prices')}\n      </HeatmapsGrid>\n    </HeatmapContainer>\n  );\n};\n\nexport default HeatmapDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}