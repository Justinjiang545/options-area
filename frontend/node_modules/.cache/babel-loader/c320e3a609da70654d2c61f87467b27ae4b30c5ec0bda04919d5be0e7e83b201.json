{"ast":null,"code":"var _jsxFileName = \"/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/black-scholes/SensitivityChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  margin-top: 1.5rem;\n`;\n_c = ChartContainer;\nconst ChartTitle = styled.h2`\n  font-size: 1.25rem;\n  margin-bottom: 1rem;\n  color: #333;\n`;\n_c2 = ChartTitle;\nconst ChartWrapper = styled.div`\n  height: 400px;\n  position: relative;\n`;\n_c3 = ChartWrapper;\nconst NoDataMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n_c4 = NoDataMessage;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n_c5 = LoadingMessage;\nconst SensitivityChart = ({\n  data,\n  variable,\n  optionType,\n  isLoading\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Format variable name for display\n  const getVariableDisplayName = variableName => {\n    const displayNames = {\n      'stock_price': 'Stock Price',\n      'strike_price': 'Strike Price',\n      'time_to_expiry': 'Time to Expiry',\n      'risk_free_rate': 'Risk-Free Rate',\n      'volatility': 'Volatility'\n    };\n    return displayNames[variableName] || variableName;\n  };\n\n  // Create or update chart\n  useEffect(() => {\n    if (isLoading || !data || !data.data || data.data.length === 0) {\n      return;\n    }\n\n    // Destroy existing chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Prepare chart data\n    const xValues = data.data.map(item => item.value);\n    const yValues = data.data.map(item => item.price);\n\n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: xValues,\n        datasets: [{\n          label: `${optionType.toUpperCase()} Option Price`,\n          data: yValues,\n          borderColor: '#4a90e2',\n          backgroundColor: 'rgba(74, 144, 226, 0.1)',\n          fill: true,\n          tension: 0.4\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return `Price: $${context.parsed.y.toFixed(2)}`;\n              },\n              title: function (tooltipItems) {\n                const item = tooltipItems[0];\n                return `${getVariableDisplayName(variable)}: ${item.label}`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: getVariableDisplayName(variable),\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Option Price ($)',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            },\n            beginAtZero: true\n          }\n        }\n      }\n    });\n\n    // Cleanup chart on component unmount\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, variable, optionType, isLoading]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        children: \"Sensitivity Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Generating chart data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  if (!data || !data.data || data.data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(ChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        children: \"Sensitivity Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        children: \"No sensitivity data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n      children: `Sensitivity to ${getVariableDisplayName(variable)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartWrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(SensitivityChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c6 = SensitivityChart;\nexport default SensitivityChart;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ChartContainer\");\n$RefreshReg$(_c2, \"ChartTitle\");\n$RefreshReg$(_c3, \"ChartWrapper\");\n$RefreshReg$(_c4, \"NoDataMessage\");\n$RefreshReg$(_c5, \"LoadingMessage\");\n$RefreshReg$(_c6, \"SensitivityChart\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Chart","jsxDEV","_jsxDEV","ChartContainer","div","_c","ChartTitle","h2","_c2","ChartWrapper","_c3","NoDataMessage","_c4","LoadingMessage","_c5","SensitivityChart","data","variable","optionType","isLoading","_s","chartRef","chartInstance","getVariableDisplayName","variableName","displayNames","length","current","destroy","ctx","getContext","xValues","map","item","value","yValues","price","type","labels","datasets","label","toUpperCase","borderColor","backgroundColor","fill","tension","options","responsive","maintainAspectRatio","plugins","legend","position","tooltip","callbacks","context","parsed","y","toFixed","title","tooltipItems","scales","x","display","text","font","size","weight","grid","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c6","$RefreshReg$"],"sources":["/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/black-scholes/SensitivityChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Chart from 'chart.js/auto';\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  margin-top: 1.5rem;\n`;\n\nconst ChartTitle = styled.h2`\n  font-size: 1.25rem;\n  margin-bottom: 1rem;\n  color: #333;\n`;\n\nconst ChartWrapper = styled.div`\n  height: 400px;\n  position: relative;\n`;\n\nconst NoDataMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n  font-style: italic;\n`;\n\nconst SensitivityChart = ({ data, variable, optionType, isLoading }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  \n  // Format variable name for display\n  const getVariableDisplayName = (variableName) => {\n    const displayNames = {\n      'stock_price': 'Stock Price',\n      'strike_price': 'Strike Price',\n      'time_to_expiry': 'Time to Expiry',\n      'risk_free_rate': 'Risk-Free Rate',\n      'volatility': 'Volatility'\n    };\n    \n    return displayNames[variableName] || variableName;\n  };\n  \n  // Create or update chart\n  useEffect(() => {\n    if (isLoading || !data || !data.data || data.data.length === 0) {\n      return;\n    }\n    \n    // Destroy existing chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    \n    const ctx = chartRef.current.getContext('2d');\n    \n    // Prepare chart data\n    const xValues = data.data.map(item => item.value);\n    const yValues = data.data.map(item => item.price);\n    \n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: xValues,\n        datasets: [\n          {\n            label: `${optionType.toUpperCase()} Option Price`,\n            data: yValues,\n            borderColor: '#4a90e2',\n            backgroundColor: 'rgba(74, 144, 226, 0.1)',\n            fill: true,\n            tension: 0.4,\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                return `Price: $${context.parsed.y.toFixed(2)}`;\n              },\n              title: function(tooltipItems) {\n                const item = tooltipItems[0];\n                return `${getVariableDisplayName(variable)}: ${item.label}`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: getVariableDisplayName(variable),\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Option Price ($)',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            },\n            beginAtZero: true\n          }\n        }\n      }\n    });\n    \n    // Cleanup chart on component unmount\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, variable, optionType, isLoading]);\n  \n  if (isLoading) {\n    return (\n      <ChartContainer>\n        <ChartTitle>Sensitivity Analysis</ChartTitle>\n        <LoadingMessage>Generating chart data...</LoadingMessage>\n      </ChartContainer>\n    );\n  }\n  \n  if (!data || !data.data || data.data.length === 0) {\n    return (\n      <ChartContainer>\n        <ChartTitle>Sensitivity Analysis</ChartTitle>\n        <NoDataMessage>No sensitivity data available</NoDataMessage>\n      </ChartContainer>\n    );\n  }\n  \n  return (\n    <ChartContainer>\n      <ChartTitle>\n        {`Sensitivity to ${getVariableDisplayName(variable)}`}\n      </ChartTitle>\n      <ChartWrapper>\n        <canvas ref={chartRef} />\n      </ChartWrapper>\n    </ChartContainer>\n  );\n};\n\nexport default SensitivityChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}