{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Options API endpoints\nexport const optionsApi = {\n  // Get ticker information\n  getTickerInfo: async ticker => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/tickers/${ticker}/info`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ticker info:', error);\n      throw error;\n    }\n  },\n  // Get expiration dates for a ticker\n  getExpirations: async ticker => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/tickers/${ticker}/expirations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching expirations:', error);\n      throw error;\n    }\n  },\n  // Get options chain\n  getOptionsChain: async (ticker, expirationDate, optionType, strikePrice, numStrikesRange) => {\n    try {\n      const params = {\n        expiration_date: expirationDate,\n        option_type: optionType\n      };\n      if (strikePrice > 0) {\n        params.strike_price = strikePrice;\n        params.num_strikes_range = numStrikesRange || 25;\n      }\n      const response = await axios.get(`${API_BASE_URL}/options/tickers/${ticker}/options`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching options chain:', error);\n      throw error;\n    }\n  },\n  // Get current price of an option contract\n  getCurrentPrice: async contractSymbol => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/contracts/${contractSymbol}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current option price:', error);\n      throw error;\n    }\n  },\n  // Get current price of an option contract\n  getCurrentPrice: async symbol => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/contracts/${symbol}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current price:', error);\n      throw error;\n    }\n  },\n  // Calculate P&L for a watchlist item\n  calculatePnL: async item => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/options/calculate-pnl`, item);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating P&L:', error);\n      throw error;\n    }\n  }\n};\n\n// Black-Scholes API endpoints\nexport const blackScholesApi = {\n  // Get ticker price\n  getTickerPrice: async ticker => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/black-scholes/ticker/${ticker}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ticker price:', error);\n      throw error;\n    }\n  },\n  // Calculate both option prices and Greeks\n  calculateOptions: async params => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/black-scholes/calculate`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating options:', error);\n      throw error;\n    }\n  },\n  // Generate sensitivity analysis data\n  generateSensitivityData: async (params, variable, rangeMin, rangeMax, steps = 20) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/black-scholes/sensitivity`, {\n        ...params,\n        variable,\n        range_min: rangeMin,\n        range_max: rangeMax,\n        steps\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error generating sensitivity data:', error);\n      throw error;\n    }\n  },\n  // Generate heatmap data\n  generateHeatmap: async params => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/black-scholes/heatmap`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating heatmap data:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","optionsApi","getTickerInfo","ticker","response","get","data","error","console","getExpirations","getOptionsChain","expirationDate","optionType","strikePrice","numStrikesRange","params","expiration_date","option_type","strike_price","num_strikes_range","getCurrentPrice","contractSymbol","symbol","calculatePnL","item","post","blackScholesApi","getTickerPrice","calculateOptions","generateSensitivityData","variable","rangeMin","rangeMax","steps","range_min","range_max","generateHeatmap"],"sources":["/Users/justinjiang/Documents/GitHub/stuff/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Options API endpoints\nexport const optionsApi = {\n  // Get ticker information\n  getTickerInfo: async (ticker) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/tickers/${ticker}/info`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ticker info:', error);\n      throw error;\n    }\n  },\n\n  // Get expiration dates for a ticker\n  getExpirations: async (ticker) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/tickers/${ticker}/expirations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching expirations:', error);\n      throw error;\n    }\n  },\n\n  // Get options chain\n  getOptionsChain: async (ticker, expirationDate, optionType, strikePrice, numStrikesRange) => {\n    try {\n      const params = {\n        expiration_date: expirationDate,\n        option_type: optionType\n      };\n      \n      if (strikePrice > 0) {\n        params.strike_price = strikePrice;\n        params.num_strikes_range = numStrikesRange || 25;\n      }\n      \n      const response = await axios.get(\n        `${API_BASE_URL}/options/tickers/${ticker}/options`, \n        { params }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching options chain:', error);\n      throw error;\n    }\n  },\n  \n  // Get current price of an option contract\n  getCurrentPrice: async (contractSymbol) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/contracts/${contractSymbol}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current option price:', error);\n      throw error;\n    }\n  },\n\n  // Get current price of an option contract\n  getCurrentPrice: async (symbol) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/options/contracts/${symbol}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current price:', error);\n      throw error;\n    }\n  },\n\n  // Calculate P&L for a watchlist item\n  calculatePnL: async (item) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/options/calculate-pnl`, item);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating P&L:', error);\n      throw error;\n    }\n  }\n};\n\n// Black-Scholes API endpoints\nexport const blackScholesApi = {\n  // Get ticker price\n  getTickerPrice: async (ticker) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/black-scholes/ticker/${ticker}/price`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ticker price:', error);\n      throw error;\n    }\n  },\n  // Calculate both option prices and Greeks\n  calculateOptions: async (params) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/black-scholes/calculate`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating options:', error);\n      throw error;\n    }\n  },\n\n  // Generate sensitivity analysis data\n  generateSensitivityData: async (params, variable, rangeMin, rangeMax, steps = 20) => {\n    try {\n      const response = await axios.post(\n        `${API_BASE_URL}/black-scholes/sensitivity`, \n        { ...params, variable, range_min: rangeMin, range_max: rangeMax, steps }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error generating sensitivity data:', error);\n      throw error;\n    }\n  },\n\n  // Generate heatmap data\n  generateHeatmap: async (params) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/black-scholes/heatmap`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating heatmap data:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}