{"ast":null,"code":"var _jsxFileName = \"/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/options-watchlist/OptionsWatchlist.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { optionsApi } from '../../services/api';\nimport TickerSearch from './TickerSearch';\nimport OptionsParameters from './OptionsParameters';\nimport OptionsChain from './OptionsChain';\nimport Watchlist from './Watchlist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n`;\n_c = Container;\nconst Title = styled.h1`\n  margin-bottom: 1.5rem;\n  color: #333;\n`;\n_c2 = Title;\nconst OptionsWatchlist = () => {\n  _s();\n  // State management\n  const [ticker, setTicker] = useState('');\n  const [expirations, setExpirations] = useState([]);\n  const [selectedExpiration, setSelectedExpiration] = useState('');\n  const [optionType, setOptionType] = useState('Call');\n  const [strikePrice, setStrikePrice] = useState(0);\n  const [numStrikesRange, setNumStrikesRange] = useState(3);\n  const [optionsChain, setOptionsChain] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [watchlist, setWatchlist] = useState([]);\n\n  // Load watchlist from localStorage on component mount\n  useEffect(() => {\n    const storedWatchlist = localStorage.getItem('optionsWatchlist');\n    if (storedWatchlist) {\n      try {\n        setWatchlist(JSON.parse(storedWatchlist));\n      } catch (error) {\n        console.error('Error parsing watchlist:', error);\n        localStorage.setItem('optionsWatchlist', '[]');\n      }\n    }\n  }, []);\n\n  // Set up periodic price updates every 30 seconds\n  useEffect(() => {\n    // Initial update\n    if (watchlist.length > 0) {\n      updateWatchlistPrices();\n    }\n\n    // Set up interval for updates\n    const intervalId = setInterval(() => {\n      if (watchlist.length > 0) {\n        updateWatchlistPrices();\n      }\n    }, 30000); // 30 seconds\n\n    // Clean up interval on unmount\n    return () => clearInterval(intervalId);\n  }, [watchlist.length]); // Only re-setup when watchlist length changes\n\n  // Fetch expirations when ticker changes\n  useEffect(() => {\n    if (ticker) {\n      fetchExpirations();\n    }\n  }, [ticker]);\n\n  // Fetch options chain when parameters change\n  useEffect(() => {\n    if (ticker && selectedExpiration && optionType) {\n      fetchOptionsChain();\n    }\n  }, [ticker, selectedExpiration, optionType, strikePrice, numStrikesRange]);\n\n  // Fetch expiration dates for the selected ticker\n  const fetchExpirations = async () => {\n    try {\n      setIsLoading(true);\n      const data = await optionsApi.getExpirations(ticker);\n      setExpirations(data);\n      if (data.length > 0) {\n        setSelectedExpiration(data[0].value);\n      }\n    } catch (error) {\n      console.error('Error fetching expirations:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch options chain data\n  const fetchOptionsChain = async () => {\n    try {\n      setIsLoading(true);\n      const data = await optionsApi.getOptionsChain(ticker, selectedExpiration, optionType, strikePrice, numStrikesRange);\n      setOptionsChain(data);\n    } catch (error) {\n      console.error('Error fetching options chain:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle ticker selection\n  const handleTickerChange = newTicker => {\n    setTicker(newTicker);\n    setOptionsChain([]);\n  };\n\n  // Handle expiration date selection\n  const handleExpirationChange = expiration => {\n    setSelectedExpiration(expiration);\n  };\n\n  // Handle option type selection\n  const handleOptionTypeChange = type => {\n    setOptionType(type);\n  };\n\n  // Handle strike filter parameters\n  const handleStrikeFilterChange = (strike, range) => {\n    setStrikePrice(strike);\n    setNumStrikesRange(range);\n  };\n\n  // Add contract to watchlist using midpoint price\n  const addToWatchlist = contract => {\n    // Calculate the midpoint price between bid and ask\n    const midpointPrice = contract.bid && contract.ask ? (contract.bid + contract.ask) / 2 : contract.lastPrice || 0;\n\n    // Add timestamp for tracking when this was added\n    const newItem = {\n      ...contract,\n      selectedPrice: midpointPrice,\n      // Use midpoint as entry price\n      currentPrice: midpointPrice,\n      // Start with midpoint as current price\n      addedAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString()\n    };\n\n    // Calculate P&L\n    if (newItem.currentPrice && newItem.selectedPrice) {\n      const pnlUsd = (newItem.currentPrice - newItem.selectedPrice) * 100;\n      const pnlPct = (newItem.currentPrice - newItem.selectedPrice) / newItem.selectedPrice * 100;\n      newItem.PNL_USD = pnlUsd;\n      newItem.PNL_PCT = pnlPct;\n    }\n    const newWatchlist = [...watchlist, newItem];\n    setWatchlist(newWatchlist);\n\n    // Save to localStorage\n    localStorage.setItem('optionsWatchlist', JSON.stringify(newWatchlist));\n  };\n\n  // Remove contract from watchlist\n  const removeFromWatchlist = index => {\n    const updatedWatchlist = [...watchlist];\n    updatedWatchlist.splice(index, 1);\n    setWatchlist(updatedWatchlist);\n\n    // Update localStorage\n    localStorage.setItem('optionsWatchlist', JSON.stringify(updatedWatchlist));\n  };\n\n  // Clear watchlist\n  const clearWatchlist = () => {\n    setWatchlist([]);\n    localStorage.removeItem('optionsWatchlist');\n  };\n\n  // Update watchlist prices and P&L with real data from API\n  const updateWatchlistPrices = async () => {\n    if (!watchlist.length) return;\n    const updatedWatchlist = await Promise.all(watchlist.map(async item => {\n      try {\n        // Get current price from the API\n        const response = await optionsApi.getCurrentPrice(item.contractSymbol);\n\n        // Extract price data from the response\n        const newPrice = response.currentPrice || item.currentPrice;\n        const newBid = response.bid || item.bid;\n        const newAsk = response.ask || item.ask;\n        const newChange = response.change || 0;\n        const newPercentChange = response.percentChange || 0;\n\n        // Calculate new P&L\n        const pnlUsd = (newPrice - item.selectedPrice) * 100; // 100 shares per contract\n        const pnlPct = (newPrice - item.selectedPrice) / item.selectedPrice * 100;\n        return {\n          ...item,\n          currentPrice: newPrice,\n          bid: newBid,\n          ask: newAsk,\n          change: newChange,\n          percentChange: newPercentChange,\n          PNL_USD: pnlUsd,\n          PNL_PCT: pnlPct,\n          lastUpdated: new Date().toISOString()\n        };\n      } catch (error) {\n        console.error('Error updating price for', item.contractSymbol, error);\n        return item;\n      }\n    }));\n    setWatchlist(updatedWatchlist);\n    localStorage.setItem('optionsWatchlist', JSON.stringify(updatedWatchlist));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Options Watchlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TickerSearch, {\n      onTickerChange: handleTickerChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), ticker && /*#__PURE__*/_jsxDEV(OptionsParameters, {\n      expirations: expirations,\n      selectedExpiration: selectedExpiration,\n      optionType: optionType,\n      strikePrice: strikePrice,\n      numStrikesRange: numStrikesRange,\n      onExpirationChange: handleExpirationChange,\n      onOptionTypeChange: handleOptionTypeChange,\n      onStrikeFilterChange: handleStrikeFilterChange,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this), optionsChain.length > 0 && /*#__PURE__*/_jsxDEV(OptionsChain, {\n      options: optionsChain,\n      onAddToWatchlist: addToWatchlist,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Watchlist, {\n      watchlist: watchlist,\n      onRemoveItem: removeFromWatchlist,\n      onClearWatchlist: clearWatchlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(OptionsWatchlist, \"pjU5iST0fxh30CJZIYSWH8qYVaE=\");\n_c3 = OptionsWatchlist;\nexport default OptionsWatchlist;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"OptionsWatchlist\");","map":{"version":3,"names":["React","useState","useEffect","styled","optionsApi","TickerSearch","OptionsParameters","OptionsChain","Watchlist","jsxDEV","_jsxDEV","Container","div","_c","Title","h1","_c2","OptionsWatchlist","_s","ticker","setTicker","expirations","setExpirations","selectedExpiration","setSelectedExpiration","optionType","setOptionType","strikePrice","setStrikePrice","numStrikesRange","setNumStrikesRange","optionsChain","setOptionsChain","isLoading","setIsLoading","watchlist","setWatchlist","storedWatchlist","localStorage","getItem","JSON","parse","error","console","setItem","length","updateWatchlistPrices","intervalId","setInterval","clearInterval","fetchExpirations","fetchOptionsChain","data","getExpirations","value","getOptionsChain","handleTickerChange","newTicker","handleExpirationChange","expiration","handleOptionTypeChange","type","handleStrikeFilterChange","strike","range","addToWatchlist","contract","midpointPrice","bid","ask","lastPrice","newItem","selectedPrice","currentPrice","addedAt","Date","toISOString","lastUpdated","pnlUsd","pnlPct","PNL_USD","PNL_PCT","newWatchlist","stringify","removeFromWatchlist","index","updatedWatchlist","splice","clearWatchlist","removeItem","Promise","all","map","item","response","getCurrentPrice","contractSymbol","newPrice","newBid","newAsk","newChange","change","newPercentChange","percentChange","children","fileName","_jsxFileName","lineNumber","columnNumber","onTickerChange","onExpirationChange","onOptionTypeChange","onStrikeFilterChange","options","onAddToWatchlist","onRemoveItem","onClearWatchlist","_c3","$RefreshReg$"],"sources":["/Users/justinjiang/Documents/GitHub/stuff/frontend/src/components/options-watchlist/OptionsWatchlist.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { optionsApi } from '../../services/api';\nimport TickerSearch from './TickerSearch';\nimport OptionsParameters from './OptionsParameters';\nimport OptionsChain from './OptionsChain';\nimport Watchlist from './Watchlist';\n\nconst Container = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h1`\n  margin-bottom: 1.5rem;\n  color: #333;\n`;\n\nconst OptionsWatchlist = () => {\n  // State management\n  const [ticker, setTicker] = useState('');\n  const [expirations, setExpirations] = useState([]);\n  const [selectedExpiration, setSelectedExpiration] = useState('');\n  const [optionType, setOptionType] = useState('Call');\n  const [strikePrice, setStrikePrice] = useState(0);\n  const [numStrikesRange, setNumStrikesRange] = useState(3);\n  const [optionsChain, setOptionsChain] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [watchlist, setWatchlist] = useState([]);\n\n  // Load watchlist from localStorage on component mount\n  useEffect(() => {\n    const storedWatchlist = localStorage.getItem('optionsWatchlist');\n    if (storedWatchlist) {\n      try {\n        setWatchlist(JSON.parse(storedWatchlist));\n      } catch (error) {\n        console.error('Error parsing watchlist:', error);\n        localStorage.setItem('optionsWatchlist', '[]');\n      }\n    }\n  }, []);\n  \n  // Set up periodic price updates every 30 seconds\n  useEffect(() => {\n    // Initial update\n    if (watchlist.length > 0) {\n      updateWatchlistPrices();\n    }\n    \n    // Set up interval for updates\n    const intervalId = setInterval(() => {\n      if (watchlist.length > 0) {\n        updateWatchlistPrices();\n      }\n    }, 30000); // 30 seconds\n    \n    // Clean up interval on unmount\n    return () => clearInterval(intervalId);\n  }, [watchlist.length]); // Only re-setup when watchlist length changes\n\n  // Fetch expirations when ticker changes\n  useEffect(() => {\n    if (ticker) {\n      fetchExpirations();\n    }\n  }, [ticker]);\n\n  // Fetch options chain when parameters change\n  useEffect(() => {\n    if (ticker && selectedExpiration && optionType) {\n      fetchOptionsChain();\n    }\n  }, [ticker, selectedExpiration, optionType, strikePrice, numStrikesRange]);\n\n  // Fetch expiration dates for the selected ticker\n  const fetchExpirations = async () => {\n    try {\n      setIsLoading(true);\n      const data = await optionsApi.getExpirations(ticker);\n      setExpirations(data);\n      if (data.length > 0) {\n        setSelectedExpiration(data[0].value);\n      }\n    } catch (error) {\n      console.error('Error fetching expirations:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch options chain data\n  const fetchOptionsChain = async () => {\n    try {\n      setIsLoading(true);\n      const data = await optionsApi.getOptionsChain(\n        ticker,\n        selectedExpiration,\n        optionType,\n        strikePrice,\n        numStrikesRange\n      );\n      setOptionsChain(data);\n    } catch (error) {\n      console.error('Error fetching options chain:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle ticker selection\n  const handleTickerChange = (newTicker) => {\n    setTicker(newTicker);\n    setOptionsChain([]);\n  };\n\n  // Handle expiration date selection\n  const handleExpirationChange = (expiration) => {\n    setSelectedExpiration(expiration);\n  };\n\n  // Handle option type selection\n  const handleOptionTypeChange = (type) => {\n    setOptionType(type);\n  };\n\n  // Handle strike filter parameters\n  const handleStrikeFilterChange = (strike, range) => {\n    setStrikePrice(strike);\n    setNumStrikesRange(range);\n  };\n\n  // Add contract to watchlist using midpoint price\n  const addToWatchlist = (contract) => {\n    // Calculate the midpoint price between bid and ask\n    const midpointPrice = contract.bid && contract.ask ? \n      (contract.bid + contract.ask) / 2 : \n      (contract.lastPrice || 0);\n    \n    // Add timestamp for tracking when this was added\n    const newItem = {\n      ...contract,\n      selectedPrice: midpointPrice,  // Use midpoint as entry price\n      currentPrice: midpointPrice,   // Start with midpoint as current price\n      addedAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString()\n    };\n    \n    // Calculate P&L\n    if (newItem.currentPrice && newItem.selectedPrice) {\n      const pnlUsd = (newItem.currentPrice - newItem.selectedPrice) * 100;\n      const pnlPct = (newItem.currentPrice - newItem.selectedPrice) / newItem.selectedPrice * 100;\n      newItem.PNL_USD = pnlUsd;\n      newItem.PNL_PCT = pnlPct;\n    }\n    \n    const newWatchlist = [...watchlist, newItem];\n    setWatchlist(newWatchlist);\n    \n    // Save to localStorage\n    localStorage.setItem('optionsWatchlist', JSON.stringify(newWatchlist));\n  };\n\n  // Remove contract from watchlist\n  const removeFromWatchlist = (index) => {\n    const updatedWatchlist = [...watchlist];\n    updatedWatchlist.splice(index, 1);\n    setWatchlist(updatedWatchlist);\n    \n    // Update localStorage\n    localStorage.setItem('optionsWatchlist', JSON.stringify(updatedWatchlist));\n  };\n\n  // Clear watchlist\n  const clearWatchlist = () => {\n    setWatchlist([]);\n    localStorage.removeItem('optionsWatchlist');\n  };\n  \n  // Update watchlist prices and P&L with real data from API\n  const updateWatchlistPrices = async () => {\n    if (!watchlist.length) return;\n    \n    const updatedWatchlist = await Promise.all(watchlist.map(async (item) => {\n      try {\n        // Get current price from the API\n        const response = await optionsApi.getCurrentPrice(item.contractSymbol);\n        \n        // Extract price data from the response\n        const newPrice = response.currentPrice || item.currentPrice;\n        const newBid = response.bid || item.bid;\n        const newAsk = response.ask || item.ask;\n        const newChange = response.change || 0;\n        const newPercentChange = response.percentChange || 0;\n        \n        // Calculate new P&L\n        const pnlUsd = (newPrice - item.selectedPrice) * 100; // 100 shares per contract\n        const pnlPct = (newPrice - item.selectedPrice) / item.selectedPrice * 100;\n        \n        return {\n          ...item,\n          currentPrice: newPrice,\n          bid: newBid,\n          ask: newAsk,\n          change: newChange,\n          percentChange: newPercentChange,\n          PNL_USD: pnlUsd,\n          PNL_PCT: pnlPct,\n          lastUpdated: new Date().toISOString()\n        };\n      } catch (error) {\n        console.error('Error updating price for', item.contractSymbol, error);\n        return item;\n      }\n    }));\n    \n    setWatchlist(updatedWatchlist);\n    localStorage.setItem('optionsWatchlist', JSON.stringify(updatedWatchlist));\n  };\n\n  return (\n    <Container>\n      <Title>Options Watchlist</Title>\n      \n      <TickerSearch onTickerChange={handleTickerChange} />\n      \n      {ticker && (\n        <OptionsParameters\n          expirations={expirations}\n          selectedExpiration={selectedExpiration}\n          optionType={optionType}\n          strikePrice={strikePrice}\n          numStrikesRange={numStrikesRange}\n          onExpirationChange={handleExpirationChange}\n          onOptionTypeChange={handleOptionTypeChange}\n          onStrikeFilterChange={handleStrikeFilterChange}\n          isLoading={isLoading}\n        />\n      )}\n      \n      {optionsChain.length > 0 && (\n        <OptionsChain\n          options={optionsChain}\n          onAddToWatchlist={addToWatchlist}\n          isLoading={isLoading}\n        />\n      )}\n      \n      <Watchlist\n        watchlist={watchlist}\n        onRemoveItem={removeFromWatchlist}\n        onClearWatchlist={clearWatchlist}\n      />\n    </Container>\n  );\n};\n\nexport default OptionsWatchlist;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}